    def test_place_order_r1_1(self, *_):
        """
        Blackbox exhaustive output testing for R5-3.
        Last_modified_date should be updated when the update operation 
        is successful.
        Exhaustive testing every case for last_modified_date's updatation
        when the update operation is successful.
        Last_modified_date will always update when the product updates,
        unless the python code itself breaks, changing any attribute
        will not break the function that updates the date.
        """

        # Logs in to a seller user before creating products
        self.open(base_url + '/login')
        self.type("#email", "test4@r16.com")
        self.type("#password", "@Password")
        self.click('input[type="submit"]')

        # Creating product
        self.open(base_url + '/createproduct')
        self.type("#price", 30)
        self.type("#title", "iPhone Seven")
        self.type("#description", "This is another test description \
                  that is at least 20 characters long")
        self.click('input[type="submit"]')
        self.assert_element("#welcome-header")

        # Case 1: last_modified_date is updated after successful update
        # operation
        self.open(base_url + '/updateproduct')
        self.type("#new_price", 32)
        self.type("#title", "iPhone Seven")
        self.type("#new_title", "iPhone Seven")
        self.type("#new_description", "This is another test description \
                  that is at least 20 characters long")
        self.click('input[type="submit"]')
        self.assert_element("#welcome-header")

        # Case 2: last_modified_date is not updated due to unsuccessful update
        # operation
        self.open(base_url + '/updateproduct')
        self.type("#new_price", 28)
        self.type("#title", "iPhone Seven")
        self.type("#new_title", "iPhone Seven")
        self.type("#new_description", "This is another test description \
                  that is at least 20 characters long")
        self.click('input[type="submit"]')
        self.assert_element("#message")
        self.assert_text("Product Update Failed", "#message")